# image pull secrets used by all pods
imagePullSecrets: []
# partially override the release name
nameOverride: ""
# fully override the release name
fullnameOverride: ""

# annotations applied to the WebAPI and Atlas deployments
commonAnnotations: []

postgresql:
  # enable an included PostgreSQL DB.
  # if set to `false`, the values under `webApi.db` are used
  enabled: true
  image:
    tag: 13.1.0
    pullPolicy: Always
  postgresqlDatabase: "ohdsi"
  # Name of existing secret to use for PostgreSQL passwords.
  # The secret has to contain the keys `postgresql-password`
  # which is the password for `postgresqlUsername` when it is
  # different of `postgres`, `postgresql-postgres-password` which
  # will override `postgresqlPassword`, `postgresql-replication-password`
  # which will override `replication.password` and `postgresql-ldap-password`
  # which will be sed to authenticate on LDAP. The value is evaluated as a template.
  existingSecret: ""
  replication:
    # should be true for production use
    enabled: false
    readReplicas: 2
    synchronousCommit: "on"
    numSynchronousReplicas: 1
  metrics:
    # should also be true for production use
    enabled: false
  # Example for creating an ohdsi_admin_user
  # initdbScripts:
  #   00-init-ohdsi-admin-user.sh: |
  #     #!/bin/bash
  #     set -e

  #     psql -v ON_ERROR_STOP=1 <<-EOSQL
  #         CREATE ROLE ohdsi_admin_user LOGIN PASSWORD '${OHDSI_ADMIN_PASSWORD}' VALID UNTIL 'infinity';
  #         COMMENT ON ROLE ohdsi_admin_user IS 'Admin user account for OHDSI applications';
  #         CREATE ROLE ohdsi_admin CREATEDB REPLICATION VALID UNTIL 'infinity';
  #         COMMENT ON ROLE ohdsi_admin IS 'Administration group for OHDSI applications';
  #         GRANT ohdsi_admin TO ohdsi_admin_user;
  #         GRANT ALL ON DATABASE ${POSTGRES_DB} TO GROUP ohdsi_admin;
  #     EOSQL
  # extraEnv:
  #   - name: OHDSI_ADMIN_PASSWORD
  #     value: admin1

webApi:
  # enable the OHDSI WebAPI deployment
  enabled: true
  # number of pod replicas for the WebAPI
  replicaCount: 1
  image:
    registry: ghcr.io
    repository: chgl/ohdsi/webapi
    tag: 2.8.0-snapshot
    pullPolicy: Always

  db:
    # database hostname
    host: "host.example.com"
    # port used to connect to the postgres DB
    port: 5432
    # name of the database inside. If postgresql.enabled=true, then postgresql.postgresqlDatabase is used
    database: "ohdsi"
    # username used to connect to the DB. Note that this name is currently used even if postgresql.enabled=true
    username: "postgres"
    # the database password. Only used if postgresql.enabled=false, otherwise the secret created by the postgresql chart is used
    password: "postgres"
    # name of an existing secret containing the password to the DB.
    existingSecret: ""
    # name of the key in `webApi.db.existingSecret` to use as the password to the DB.
    existingSecretKey: "postgresql-postgres-password"

  # annotations applied to the WebAPI pod
  podAnnotations: {}

  # security context for the WebAPI pod
  podSecurityContext:
    {}
    # fsGroup: 2000

  # security context for the WebAPI container
  securityContext: # +doc-gen:break
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 101

  service:
    type: ClusterIP
    port: 8080

  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: ohdsi.127.0.0.1.xip.io
        paths: ["/WebAPI"]
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  readinessProbe: # +doc-gen:break
    failureThreshold: 5
    initialDelaySeconds: 45
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15
  # currentyl disabled due to the potentially large time the migration may take
  # we can use startupProbe starting in k8s 1.20
  # livenessProbe:
  #   failureThreshold: 5
  #   initialDelaySeconds: 30
  #   periodSeconds: 15
  #   successThreshold: 1
  #   timeoutSeconds: 15

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # extra environment variables
  extraEnv:
    []
    # - name: "TEST"
    #   value: "TEST"

atlas:
  # enable the OHDSI Atlas deployment
  enabled: true
  replicaCount: 1
  image:
    registry: ghcr.io
    repository: chgl/ohdsi/atlas
    tag: 2.8.0
    pullPolicy: Always

  # the base URL of the OHDSI WebAPI, e.g. https://example.com/WebAPI
  # if this value is not set but `webapi.ingress.enabled=true`, then this
  # URL is constructed from `webapi.ingress`
  webApiUrl: ""

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  # ContainerSecurityContext for the Atlas container
  securityContext: # +doc-gen:break
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 101

  service:
    type: ClusterIP
    port: 8080

  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: ohdsi.127.0.0.1.xip.io
        paths: ["/atlas"]
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  readinessProbe: # +doc-gen:break
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15
  livenessProbe: # +doc-gen:break
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # extra environment variables
  extraEnv:
    []
    # - name: "TEST"
    #   value: "TEST"

# define a custom init container to be run as part of the installation.
cdmInitJob:
  # if enabled, create a Kubernetes Job running the specified container
  # see [cdm-init-job.yaml](templates/cdm-init-job.yaml) for the env vars
  # that are passed by default
  enabled: false
  image:
    registry: docker.io
    repository: docker/whalesay
    tag: latest
    pullPolicy: Always

  # annotations set on the cdm-init pod
  podAnnotations: {}

  # PodSecurityContext for the cdm-init pod
  podSecurityContext:
    {}
    # fsGroup: 2000

  # ContainerSecurityContext for the cdm-init container
  securityContext: {}

  # extra environment variables to set
  extraEnv:
    []
    # - name: "TEST"
    #   value: "TEST"

# by default, Achilles connects to the same DB that the WebAPI uses
# this assumes that it contains both the WebAPI schema (`ohdsi`) as well
# as any CDM schemas. Future versions may allow for more flexibility here.
achilles:
  # whether or not to enable the Achilles cron job
  enabled: true
  # when to run the Achilles job. See <https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax>
  schedule: "@daily"
  image:
    registry: ghcr.io
    repository: chgl/ohdsi/achilles
    tag: master
    pullPolicy: Always
  schemas:
    # name of the schema containing the OMOP CDM. Equivalent to the Achilles `ACHILLES_CDM_SCHEMA` env var.
    cdm: "synpuf_cdm"
    # name of the schema containing the vocabulary. Equivalent to the Achilles `ACHILLES_VOCAB_SCHEMA` env var.
    vocab: "synpuf_vocab"
    # name of the schema containing the cohort generation results. Equivalent to the Achilles `ACHILLES_RES_SCHEMA` env var.
    res: "synpuf_results"

  # version of the CDM. Equivalent to the Achilles `ACHILLES_CDM_VERSION` env var.
  cdmVersion: "5.3.1"

  # ContainerSecurityContext for the Achilles container
  securityContext: # +doc-gen:break
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    runAsUser: 10001
