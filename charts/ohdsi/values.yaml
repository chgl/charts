# image pull secrets used by all pods
imagePullSecrets: []
# partially override the release name
nameOverride: ""
# fully override the release name
fullnameOverride: ""

# annotations applied to all deployments and jobs
commonAnnotations: []

# see <https://github.com/bitnami/charts/tree/master/bitnami/postgresql> for details
postgresql:
  # enable an included PostgreSQL DB.
  # if set to `false`, the values under `webApi.db` are used
  enabled: true
  auth:
    # name of the database to create
    # see: <https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run>
    database: "ohdsi"
    #  Name of existing secret to use for PostgreSQL credentials
    # `auth.postgresPassword`, `auth.password`, and `auth.replicationPassword` will be ignored and picked up from this secret
    # The secret must contain the keys `postgres-password` (which is the password for "postgres" admin user),
    # `password` (which is the password for the custom user to create when `auth.username` is set),
    # and `replication-password` (which is the password for replication user).
    # The secret might also contains the key `ldap-password` if LDAP is enabled. `ldap.bind_password` will be ignored and
    # picked from this secret in this case.
    # The value is evaluated as a template.
    existingSecret: ""
    # Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
    enablePostgresUser: true
    # Name for a custom user to create
    username: ""
    # Password for the custom user to create
    password: ""
  primary:
    initdb:
      # Dictionary of initdb scripts
      # Specify dictionary of scripts to be run at first boot
      scripts:
        {}
        # 00-init-ohdsi-admin-user.sh: |
        #   #!/bin/bash
        #   set -e
        #   psql -v ON_ERROR_STOP=1 <<-EOSQL
        #       CREATE ROLE ohdsi_admin_user LOGIN PASSWORD '${OHDSI_ADMIN_PASSWORD}' VALID UNTIL 'infinity';
        #       COMMENT ON ROLE ohdsi_admin_user IS 'Admin user account for OHDSI applications';
        #       CREATE ROLE ohdsi_admin CREATEDB REPLICATION VALID UNTIL 'infinity';
        #       COMMENT ON ROLE ohdsi_admin IS 'Administration group for OHDSI applications';
        #       GRANT ohdsi_admin TO ohdsi_admin_user;
        #       GRANT ALL ON DATABASE ${POSTGRES_DB} TO GROUP ohdsi_admin;
        #   EOSQL
    # extraEnvVars:
    #   - name: OHDSI_ADMIN_PASSWORD
    #     value: admin1
    containerSecurityContext: # +doc-gen:ignore
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL

webApi:
  # enable the OHDSI WebAPI deployment
  enabled: true
  # number of pod replicas for the WebAPI
  replicaCount: 1
  # the WebAPI image
  image: # +doc-gen:ignore
    registry: docker.io
    repository: ohdsi/webapi
    tag: 2.11.0
    pullPolicy: IfNotPresent

  podDisruptionBudget:
    # create a PodDisruptionBudget resource for the OHDSI Atlas pods
    enabled: false
    # Minimum available instances; ignored if there is no PodDisruptionBudget
    minAvailable: 1
    # Maximum unavailable instances; ignored if there is no PodDisruptionBudget
    maxUnavailable: ""

  db:
    # database hostname
    host: "host.example.com"
    # port used to connect to the postgres DB
    port: 5432
    # name of the database inside. If postgresql.enabled=true, then postgresql.postgresqlDatabase is used
    database: "ohdsi"
    # username used to connect to the DB. Note that this name is currently used even if postgresql.enabled=true
    username: "postgres"
    # the database password. Only used if postgresql.enabled=false, otherwise the secret created by the postgresql chart is used
    password: "postgres"
    # name of an existing secret containing the password to the DB.
    existingSecret: ""
    # name of the key in `webApi.db.existingSecret` to use as the password to the DB.
    existingSecretKey: "postgresql-postgres-password"
    # schema used for the WebAPI's tables. Also referred to as the "OHDSI schema"
    schema: "ohdsi"

  auth:
    openid:
      # enable securing the WebAPI via an OpenId connect provider.
      # make sure to also configure `atlas.config.local` appropriately to enable the auth provider in ATLAS.
      # See "[Securing Atlas using OpenID Connect](#securing-atlas-using-openid-connect)" below
      enabled: false
      # Required. Points to the openid-configuration endpoint of the provider,
      # e.g. `https://auth.example.com/auth/realms/OHDSI/.well-known/openid-configuration`
      oidUrl: ""
      # the client id
      clientId: ""
      # the client secret
      clientSecret: ""
      # name of an existing Kubernetes secret containing the OpenId client secret
      existingSecret: ""
      # name of the key inside the secret whose value is the OpenId client secret
      existingSecretKey: "webapi-openid-client-secret"
      # URL including the OHDSI WebAPI oauth callback, e.g. `https://example.com/WebAPI/user/oauth/callback`.
      # If unset, a URL is constructed from `ingress.hosts[0]`
      callbackApi: ""
      # URL including the callback URL referring to the ATLAS UI, e.g. `https://example.com/atlas/index.html#/welcome/`.
      # If unset, a URL is constructed from `ingress.hosts[0]`
      callbackUI: ""
      # URL to be redirected to when logging out, e.g. `https://example.com/atlas/index.html#/welcome/`.
      # If unset, a URL is constructed from `ingress.hosts[0]`
      logoutUrl: ""
      # OpenID redirect URL, e.g. `https://example.com/atlas/index.html#/welcome/null`
      # If unset, a URL is constructed from `ingress.hosts[0]`
      redirectUrl: ""
    basic:
      # enable securing access to the WebAPI using basic security configuration.
      # See <https://github.com/OHDSI/WebAPI/wiki/Basic-Security-Configuration> for details.
      enabled: false
      # schema inside the database specified in `.Values.webApi.db` which contains tables used for querying basic
      # security users. If unset, defaults to `.Values.webApi.db.schema`.
      schema: ""
      # SQL query used to fetch entries in the basic security table by their username. Requires a table called `basic_security_users`
      # to exist within the above schema, see [webapi-enable-auth-values.yaml](ci/webapi-enable-auth-values.yaml)
      # for an example DB setup. Evaluated as a template.
      query: >-
        SELECT password, first_name AS firstname, middle_name AS middlename, last_name AS lastname, username
        FROM basic_security_users
        WHERE username = ?

  # annotations applied to the pod
  podAnnotations: {}

  cors:
    # whether CORS is enabled for the WebAPI. Sets the `security.cors.enabled` property.
    enabled: false
    # value of the `Access-Control-Allow-Origin` header. Sets the `security.origin` property.
    # set to `*` to allow requests from all origins.
    # if `cors.enabled=true`, `cors.allowedOrigin=""` and `ingress.enabled=true`, then `ingress.hosts[0].host` is used.
    allowedOrigin: ""

  # security context for the pod
  podSecurityContext:
    {}
    # fsGroup: 2000

  # security context for the WebAPI container
  securityContext: # +doc-gen:ignore
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 101

  # the service used to expose the WebAPI web port
  service: # +doc-gen:break
    type: ClusterIP
    port: 8080

  # resource requests and limits for the container. <br>
  # 2Gi+ of RAM are recommended (<https://github.com/OHDSI/WebAPI/issues/1811#issuecomment-792988811>) <br>
  # You might also want to use `webApi.extraEnv` to set `MinRAMPercentage` and `MaxRAMPercentage`:
  #
  # Example:
  # helm template charts/ohdsi \
  #    --set webApi.extraEnv[0].name="JAVA_OPTS" \
  #    --set webApi.extraEnv[0].value="-XX:MinRAMPercentage=60.0 -XX:MaxRAMPercentage=80.0"
  resources:
    {}
    # If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # readiness probe
  readinessProbe: # +doc-gen:ignore
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15
  # startup probe
  startupProbe: # +doc-gen:ignore
    failureThreshold: 10
    initialDelaySeconds: 60
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 30
  # liveness probe
  livenessProbe: # +doc-gen:ignore
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15

  # node labels for pods assignment
  # see: <https://kubernetes.io/docs/user-guide/node-selection/>
  nodeSelector: {}

  # tolerations for pods assignment
  # see: <https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/>
  tolerations: []

  # affinity for pods assignment
  # see: <https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity>
  affinity: {}

  # extra environment variables
  extraEnv:
    []
    # - name: "TEST"
    #   value: "TEST"

atlas:
  # enable the OHDSI Atlas deployment
  enabled: true
  # number of replicas
  replicaCount: 1
  # the Atlas image
  image: # +doc-gen:ignore
    registry: docker.io
    repository: ohdsi/atlas
    tag: 2.10.1
    pullPolicy: IfNotPresent

  podDisruptionBudget:
    # create a PodDisruptionBudget resource for the OHDSI Atlas pods
    enabled: false
    # Minimum available instances; ignored if there is no PodDisruptionBudget
    minAvailable: 1
    # Maximum unavailable instances; ignored if there is no PodDisruptionBudget
    maxUnavailable: ""

  # the base URL of the OHDSI WebAPI, e.g. https://example.com/WebAPI
  # if this value is not set but `ingress.enabled=true` and `constructWebApiUrlFromIngress=true`,
  # then this URL is constructed from `ingress`
  webApiUrl: ""

  # if enabled, sets the WebAPI URL to `http://ingress.hosts[0]/WebAPI`
  constructWebApiUrlFromIngress: true

  # annotations for the pod
  podAnnotations: {}

  # security context for the pod
  podSecurityContext:
    {}
    # fsGroup: 2000

  # ContainerSecurityContext for the Atlas container
  securityContext: # +doc-gen:ignore
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 101

  # the service used to expose the Atlas web port
  service: # +doc-gen:break
    type: ClusterIP
    port: 8080

  # resource requests and limits for the container
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # readiness probe
  readinessProbe: # +doc-gen:ignore
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15
  # liveness probe
  livenessProbe: # +doc-gen:ignore
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15

  # node labels for pods assignment
  # see: <https://kubernetes.io/docs/user-guide/node-selection/>
  nodeSelector: {}

  # tolerations for pods assignment
  # see: <https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/>
  tolerations: []

  # affinity for pods assignment
  # see: <https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity>
  affinity: {}

  # extra environment variables
  extraEnv:
    []
    # - name: "TEST"
    #   value: "TEST"

  # override the config files to configure Atlas
  config:
    # this value is expected to contain the config-local.js contents
    local: ""

# define a custom init container to be run as part of the installation.
cdmInitJob:
  # if enabled, create a Kubernetes Job running the specified container
  # see [cdm-init-job.yaml](templates/cdm-init-job.yaml) for the env vars
  # that are passed by default
  enabled: false
  # the container image used to create the CDM initialization job
  image: # +doc-gen:break
    registry: docker.io
    repository: docker/whalesay
    tag: latest
    pullPolicy: IfNotPresent

  # the number of retries before considering the Job as failed
  backoffLimit: 6

  # clean up Job and dependent objects after job completion <https://kubernetes.io/docs/concepts/workloads/controllers/job/#ttl-mechanism-for-finished-jobs>
  ttlSecondsAfterFinished: 120

  # annotations set on the cdm-init pod
  podAnnotations: {}

  # PodSecurityContext for the cdm-init pod
  podSecurityContext:
    {}
    # fsGroup: 2000

  # ContainerSecurityContext for the cdm-init container
  securityContext: {}

  # extra environment variables to set
  extraEnv:
    []
    # - name: "TEST"
    #   value: "TEST"

# by default, Achilles connects to the same DB that the WebAPI uses
# this assumes that it contains both the WebAPI schema (`ohdsi`) as well
# as any CDM schemas. See <https://github.com/OHDSI/Broadsea-Achilles> for details on the container used.
achilles:
  # whether or not to enable the Achilles cron job
  enabled: true
  # when to run the Achilles job. See <https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax>
  schedule: "@daily"
  # the Achilles image
  image: # +doc-gen:ignore
    registry: docker.io
    repository: ohdsi/broadsea-achilles
    tag: master
    # the policy is set to `Always` by default until an immutable image tag for the broadsea-achilles image is available
    pullPolicy: Always
  schemas:
    # name of the schema containing the OMOP CDM. Equivalent to the Achilles `ACHILLES_CDM_SCHEMA` env var.
    cdm: "synpuf_cdm"
    # name of the schema containing the vocabulary. Equivalent to the Achilles `ACHILLES_VOCAB_SCHEMA` env var.
    vocab: "synpuf_vocab"
    # name of the schema containing the cohort generation results. Equivalent to the Achilles `ACHILLES_RES_SCHEMA` env var.
    res: "synpuf_results"

  # The number of successful finished jobs to retain. Value must be non-negative integer.
  successfulJobsHistoryLimit: 3

  # The number of failed finished jobs to retain. Value must be non-negative integer.
  failedJobsHistoryLimit: 1

  # Specifies how to treat concurrent executions of a Job. Valid values are:
  # - "Allow" (default): allows CronJobs to run concurrently;
  # - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet;
  # - "Replace": cancels currently running job and replaces it with a new one
  concurrencyPolicy: Forbid

  # version of the CDM. Equivalent to the Achilles `ACHILLES_CDM_VERSION` env var.
  cdmVersion: "5.3"

  # the CDM source name. Equivalent to the Achilles `ACHILLES_SOURCE` env var.
  sourceName: "synpuf-5.3.1"

  # ContainerSecurityContext for the Achilles container
  securityContext: # +doc-gen:ignore
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    runAsUser: 10001

  # extra environment variables to pass to the Achilles container
  extraEnv:
    []
    # - name: "TEST"
    #   value: "TEST"

ingress:
  # whether to create an Ingress to expose the Atlas web interface
  enabled: false
  # provide any additional annotations which may be required. Evaluated as a template.
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ohdsi.127.0.0.1.nip.io
      pathType: ImplementationSpecific
  # ingress TLS config
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
