{{- with .Values.webApi }}
{{- if .enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ohdsi.fullname" $ }}-webapi
  labels:
    {{- include "ohdsi.labels" $ | nindent 4 }}
    app.kubernetes.io/name: {{ include "ohdsi.name" $ }}-webapi
    app.kubernetes.io/instance: {{ $.Release.Name }}-webapi
  {{- with $.Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "ohdsi.name" $ }}-webapi
      app.kubernetes.io/instance: {{ $.Release.Name }}-webapi
  template:
    metadata:
    {{- with .podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "ohdsi.name" $ }}-webapi
        app.kubernetes.io/instance: {{ $.Release.Name }}-webapi
    spec:
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-db
          image: "{{ $.Values.postgresql.image.registry }}/{{ $.Values.postgresql.image.repository }}:{{ $.Values.postgresql.image.tag }}"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 65532
            runAsGroup: 65532
          env:
            - name: PGHOST
              value: "{{ include "ohdsi.database.host" $ }}"
            - name: PGPORT
              value: "{{ include "ohdsi.database.port" $ }}"
            - name: PGUSER
              value: "{{ include "ohdsi.database.user" $ }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready; do
                echo "Waiting for DB ${PGUSER}@${PGHOST}:${PGPORT} to be up";
                sleep 15;
              done;
      containers:
        - name: webapi
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
          image: "{{ .image.registry }}/{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ .image.pullPolicy }}
          env:
            - name: SECURITY_CORS_ENABLED
              value: {{ .cors.enabled | quote }}
            {{- if and .cors.enabled (or .cors.allowedOrigin $.Values.ingress.enabled) }}
            - name: SECURITY_ORIGIN
              {{- if .cors.allowedOrigin }}
              value: {{ .cors.allowedOrigin | quote }}
              {{- else if $.Values.ingress.enabled}}
              {{- $host := (index $.Values.ingress.hosts 0) }}
              value: {{ $host.host | quote }}
              {{- end }}
            {{- end }}
            - name: DATASOURCE_DRIVERCLASSNAME
              value: org.postgresql.Driver
            - name: DATASOURCE_URL
              value: {{ include "ohdsi.webapi.jdbcUrl" $ }}
            - name: DATASOURCE_USERNAME
              value: {{ include "ohdsi.database.user" $ }}
            - name: DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ohdsi.webapi.db-secret-name" $ }}
                  {{- if .db.existingSecret }}
                  key: {{ .db.existingSecretKey }}
                  {{- else }}
                  key: "postgres-password"
                  {{- end }}
            - name: DATASOURCE_OHDSI_SCHEMA
              value: {{ .db.schema }}
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA
              value: {{ .db.schema }}
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
              value: org.hibernate.dialect.PostgreSQLDialect
            - name: SPRING_BATCH_REPOSITORY_TABLEPREFIX
              value: {{ .db.schema }}.BATCH_
            - name: FLYWAY_DATASOURCE_DRIVERCLASSNAME
              value: org.postgresql.Driver
            - name: FLYWAY_SCHEMAS
              value: {{ .db.schema }}
            - name: FLYWAY_PLACEHOLDERS_OHDSISCHEMA
              value: {{ .db.schema }}
            - name: FLYWAY_DATASOURCE_URL
              value: {{ include "ohdsi.webapi.jdbcUrl" $ }}
            - name: FLYWAY_DATASOURCE_USERNAME
              value: {{ include "ohdsi.database.user" $ }}
            - name: FLYWAY_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ohdsi.webapi.db-secret-name" $ }}
                  {{- if .db.existingSecret }}
                  key: {{ .db.existingSecretKey }}
                  {{- else }}
                  key: "postgres-password"
                  {{- end }}
            {{- if (or .auth.openid.enabled .auth.basic.enabled) }}
            - name: SECURITY_PROVIDER
              value: "AtlasRegularSecurity"
            {{- if .auth.openid.enabled }}
            - name: SECURITY_AUTH_OPENID_ENABLED
              value: "true"
            - name: SECURITY_OID_CLIENTID
              value: {{ .auth.openid.clientId | quote }}
            - name: SECURITY_OID_APISECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "ohdsi.auth.secretName" $ }}
                  key: {{ include "ohdsi.auth.secretKey" $ }}
            - name: SECURITY_OAUTH_CALLBACK_API
              value: {{ include "ohdsi.oauth.callback.api" $ }}
            - name: SECURITY_OAUTH_CALLBACK_UI
              value: {{ include "ohdsi.oauth.callback.ui" $ }}
            - name: SECURITY_OID_LOGOUTURL
              value: {{ include "ohdsi.oid.logoutUrl" $ }}
            - name: SECURITY_OID_REDIRECTURL
              value: {{ include "ohdsi.oid.redirectUrl" $ }}
            - name: SECURITY_OID_URL
              value: {{ .auth.openid.oidUrl | quote }}
            {{- end }}
            {{- if .auth.basic.enabled }}
            - name: SECURITY_DB_DATASOURCE_URL
              value: {{ include "ohdsi.webapi.jdbcUrl" $ }}
            - name: SECURITY_DB_DATASOURCE_DRIVERCLASSNAME
              value: "org.postgresql.Driver"
            - name: SECURITY_DB_DATASOURCE_SCHEMA
              value: {{ default .db.schema .auth.basic.schema }}
            - name: SECURITY_DB_DATASOURCE_USERNAME
              value: {{ include "ohdsi.database.user" $ }}
            - name: SECURITY_DB_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ohdsi.webapi.db-secret-name" $ }}
                  {{- if .db.existingSecret }}
                  key: {{ .db.existingSecretKey }}
                  {{- else }}
                  key: "postgres-password"
                  {{- end }}
            - name: SECURITY_DB_DATASOURCE_AUTHENTICATIONQUERY
              value: {{ tpl .auth.basic.query $ }}
            {{- end }}
            {{- end }}
          {{- if .extraEnv }}
          {{- toYaml .extraEnv | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          {{- with .readinessProbe }}
          readinessProbe:
            httpGet:
              path: /WebAPI/info
              port: http
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            successThreshold: {{ .successThreshold }}
            failureThreshold: {{ .failureThreshold }}
          {{- end }}
          {{- with .startupProbe }}
          startupProbe:
            httpGet:
              path: /WebAPI/info
              port: http
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            successThreshold: {{ .successThreshold }}
            failureThreshold: {{ .failureThreshold }}
          {{- end }}
          {{- with .livenessProbe }}
          livenessProbe:
            httpGet:
              path: /WebAPI/info
              port: http
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            successThreshold: {{ .successThreshold }}
            failureThreshold: {{ .failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .resources | nindent 12 }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      {{- with .nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: tmp-volume
          emptyDir: {}
{{- end }}
{{- end }}
