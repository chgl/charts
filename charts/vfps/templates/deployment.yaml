apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "vfps.fullname" . }}
  labels:
    {{- include "vfps.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "vfps.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "vfps.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "vfps.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-db
          image: {{ include "vfps.waitForDatabaseInitContainerImage" . }}
          imagePullPolicy: {{ .Values.waitForDatabaseInitContainer.image.pullPolicy }}
          {{- with .Values.restrictedContainerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: PGHOST
              value: {{ include "vfps.database.host" $ }}
            - name: PGPORT
              value: {{ include "vfps.database.port" $ | quote }}
            - name: PGUSER
              value: {{ include "vfps.database.user" $ }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready; do
                echo "Waiting for DB ${PGUSER}@${PGHOST}:${PGPORT} to be up";
                sleep 15;
              done;
        {{ if .Values.migrationsJob.enabled }}
        - name: wait-for-migrations-job
          image: ghcr.io/groundnuty/k8s-wait-for:no-root-v1.7@sha256:27283e1889d2f33040c51fc5d2066c88c9668c2c8708620b50762990e0740e4c
          args: ["job", "{{ include "vfps.migrationsJob.resourceName" . }}"]
          {{- with .Values.restrictedContainerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /livez
              port: http
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: COMPlus_EnableDiagnostics
              value: "0"
            - name: ConnectionStrings__PostgreSQL
              value: {{ include "vfps.database.connection-string" . }}
            - name: PGUSER
              value: {{ include "vfps.database.user" . }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "vfps.database.db-secret-name" . }}
                  key: {{ include "vfps.database.db-secret-key" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
