replicaCount: 1

ingress:
  enabled: true
  hosts:
    - host: pathling-server.127.0.0.1.nip.io
      paths:
        - path: /
          pathType: ImplementationSpecific
          portName: http

minio:
  ingress:
    enabled: true
    hostname: pathling-server-minio.127.0.0.1.nip.io
  apiIngress:
    enabled: true
    hostname: pathling-server-minio-api.127.0.0.1.nip.io

serviceAccount:
  create: true
  automountServiceAccountToken: true

# not supported yet by the official pathling release
spark:
  rbac:
    create: true

extraEnv:
  - name: pathling.terminology.enabled
    value: "false"
  - name: pathling.spark.explainQueries
    value: "true"
  - name: spark.master
    value: "k8s://https://kubernetes:443"
  - name: spark.kubernetes.authenticate.driver.serviceAccountName
    value: ps-pathling-server
  - name: spark.kubernetes.container.image
    value: docker.io/apache/spark:v3.3.2
# spark.driver.host
# spark.driver.port
# Spark executors must be able to connect to the Spark driver over a hostname and a port that is routable from the Spark executors.
# The specific network configuration that will be required for Spark to work in client mode will vary per setup.
# If you run your driver inside a Kubernetes pod, you can use a headless service to allow your driver pod to be routable
# from the executors by a stable hostname. When deploying your headless service, ensure that the service’s label selector will
# only match the driver pod and no other pods; it is recommended to assign your driver pod a sufficiently unique label and to
# use that label in the label selector of the headless service. Specify the driver’s hostname via spark.driver.host and
# your spark driver’s port to spark.driver.port.
