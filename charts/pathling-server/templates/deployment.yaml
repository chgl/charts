apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pathling-server.fullname" . }}
  labels:
    {{- include "pathling-server.labels" . | nindent 4 }}
  {{- with .Values.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "pathling-server.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "pathling-server.matchLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "pathling-server.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: pathling-server
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: MANAGEMENT_ENDPOINT_HEALTH_PROBES_ADD_ADDITIONAL_PATHS
              value: "true"
            - name: pathling.storage.warehouseUrl
              value: "{{ .Values.warehouse.url }}"
            - name: fs.s3a.endpoint
              value: "{{ include "pathling-server.s3Endpoint" . }}"
            - name: fs.s3a.aws.credentials.provider
              value: "org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider"
            - name: fs.s3a.access.key
              valueFrom:
                secretKeyRef:
                  name: {{ include "pathling-server.s3CredentialsSecretName" . }}
                  key: {{ include "pathling-server.s3AccessKeySecretKey" . }}
            - name: fs.s3a.secret.key
              valueFrom:
                secretKeyRef:
                  name: {{ include "pathling-server.s3CredentialsSecretName" . }}
                  key: {{ include "pathling-server.s3SecretKeySecretKey" . }}
            - name: fs.s3a.impl
              value: "org.apache.hadoop.fs.s3a.S3AFileSystem"
            - name: fs.s3a.path.style.access
              value: "true"
            # SPARK
            - name: spark.driver.host
              value: {{ include "pathling-server.fullname" . }}-driver
            - name: spark.driver.port
              value: "7077"
            - name: spark.blockManager.port
              value: "7078"
            - name: spark.driver.bindAddress
              value: "0.0.0.0"
            - name: spark.master
              value: "k8s://https://kubernetes.default.svc"
            - name: spark.kubernetes.namespace
              value: {{ .Release.Namespace }}
            - name: spark.kubernetes.executor.container.image
              value: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            # <https://spark.apache.org/docs/latest/running-on-kubernetes.html#client-mode-executor-pod-garbage-collection>
            - name: spark.kubernetes.driver.pod.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: spark.ui.prometheus.enabled
              value: "true"
            - name: spark.executor.instances
              value: "3"
            - name: spark.executor.memory
              value: "3G"
            - name: spark.kubernetes.executor.request.cores
              value: "2"
            - name: spark.kubernetes.executor.limit.cores
              value: "2"
            - name: spark.kubernetes.executor.request.memory
              value: "4G"
            - name: spark.kubernetes.executor.limit.memory
              value: "4G"
            {{- if .Values.extraEnv }}
            {{- toYaml .Values.extraEnv | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: http-metrics
              containerPort: 8081
              protocol: TCP
            - name: http-spark-ui
              containerPort: 4040
              protocol: TCP
            - name: spark-driver
              containerPort: 7077
              protocol: TCP
            - name: spark-blck-mngr
              containerPort: 7078
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
