# Default values for fhir-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image: # +doc-gen:ignore
  registry: mcr.microsoft.com
  repository: healthcareapis/r4-fhir-server
  tag: 4.0.332@sha256:79203710c9fc2e2c76c4085b80d705bb26787c04bbb3e6c9383d4a6582f1bafa
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podIdentity:
  enabled: false
  # identityClientId: my-id
  # identityResourceId: my-identity-resource-id

export:
  enabled: false
  blobStorageUri: https://mystorageaccount.blob.core.windows.net

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext: # +doc-gen:ignore
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 80

serviceAccount:
  # Specifies whether a service account should be created.
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # whether to automount the SA token
  automountServiceAccountToken: false

database:
  # options: ExistingSqlServer, SqlServer, SqlContainer, CosmosDb
  dataStore: "SqlServer"
  resourceGroup: ""
  location: ""
  sql:
    # 0: Basic
    # 1: Business
    # 2: BusinessCritical
    # 3: DataWarehouse
    # 4: Free
    # 5: GeneralPurpose
    # 6: Hyperscale
    # 7: Premium
    # More at https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/2015-05-01-preview/sql#DatabaseEdition
    edition: 5
    maxPoolSize: 100
    schema:
      automaticUpdatesEnabled: true
  cosmosDb:
    initialCollectionThroughput: "400"
    # databaseId: health
    # collectionId: fhir
  sqlContainer:
    # Accept EULA when deploying with --set database.sqlContainer.acceptEula="Y"
    acceptEula: "n"
    edition: "Developer"
    image: # +doc-gen:ignore
      registry: mcr.microsoft.com
      repository: mssql/server
      tag: 2022-latest@sha256:ea73825f3d88a23c355ac2f9fdc6bd960fec90171c12c572109b36a558f77bb8
      pullPolicy: IfNotPresent
    replicaCount: 1
    port: 1433
    databaseName: FHIR
    userName: sa
    # set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
    # More information: <https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15>
    resourcesPreset: "medium"
    resources: {}
    persistence:
      storageClass: ""
      size: 8Gi
      annotations:
        {}
        # "helm.sh/resource-policy": keep
    securityContext:
      allowPrivilegeEscalation: false
    podSecurityContext:
      # mssql container has user mssql defined with id 10001
      runAsUser: 10001
      runAsGroup: 10001
      fsGroup: 10001
  existingSqlServer:
    userName: sa
    databaseName: FHIR
    serverName: mymssql-mssql-linux.default
    password: fhir
    # name of a pre-created secret to retrieve the SQL Server's password.
    # the secret must have a key named `DATABASEPASSWORD` with the password as its value.
    existingSecret: ""
    port: 1433
  # sets the connection timeout (`Connection Timeout` parameter of the connection string)
  connectionTimeoutSeconds: 30

appInsights:
  secretKey: "instrumentationKey"
#  secretName: "cluster-app-insights"

serviceMonitor:
  enabled: false
  port: 1234
  labels:
    {}
    # prometheus: monitor
  interval: 30s
  dotnetRuntimeMetrics: true
  httpMetrics: true
  systemMetrics: true

security:
  enabled: false
  enableAadSmartOnFhirProxy: false
  authority: null
  audience: null

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: ["/"]
      pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
# More information: <https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15>
resourcesPreset: "medium"

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# add additional environment variables
extraEnv: []

# @ignored
curl: # +doc-gen:ignore
  image:
    registry: docker.io
    repository: curlimages/curl
    tag: 8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6

tests:
  automountServiceAccountToken: false
  # set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
  # More information: <https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15>
  resourcesPreset: "nano"
  # configure the test pods resource requests and limits
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
